name: sync_imgs

on:
  push:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      buildx-cache: ${{ steps.cache-buildx.outputs.cache-key }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

  sync_images:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - source: "tensorflow/tensorflow:latest-jupyter"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:tensorflow_jupyter"
          - source: "python:3-slim"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:python3-slim"
          - source: "postgres:16"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:postgres"
          - source: "redis:alpine"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:redis"
          - source: "opensearchproject/opensearch:2.16.0"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:opensearch"
          - source: "ghcr.io/open-webui/open-webui:main"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:webui"
          - source: "ollama/ollama"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:ollama"
          - source: "ghcr.io/open-webui/pipelines:main"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:pipelines"
          - source: "ghcr.io/berriai/litellm:main-v1.44.10-stable"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:litellm"
          - source: "nginx"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:nginx"
          - source: "sqjian/venv:langwatch_app"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:langwatch_app"
          - source: "sqjian/venv:langwatch_nlp"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:langwatch_nlp"
          - source: "langwatch/langevals:latest"
            dest: "registry.cn-hongkong.aliyuncs.com/vsc-github/venv:langevals"
    steps:
      - name: Login to aliyuncs
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hongkong.aliyuncs.com
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Sync Docker Images
        run: |
          #!/usr/bin/env bash

          set -euxo pipefail

          sync_image() {
              local source_img=$1
              local dest_img=$2

              if ! docker pull "${dest_img}" >/dev/null 2>&1; then
                  echo "Image ${dest_img} not found. Pulling from source and pushing to destination..."
                  docker pull "${source_img}"
                  docker tag "${source_img}" "${dest_img}"
                  docker push "${dest_img}"
                  docker rmi "${source_img}" "${dest_img}"
              else
                  echo "Image ${dest_img} already exists. Skipping pull and push."
              fi
          }

          sync_image "${{ matrix.source }}" "${{ matrix.dest }}"
